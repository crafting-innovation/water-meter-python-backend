AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Parameters:
  ServiceName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "gourav-bootstrap-cf"
  Environment:
    Type: String
    Default: "dev"
  SampleEnvVariableName:
    Type: String
    Default: "test-value"
  DatadogMonitored:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  DatadogMonitored: !Equals [ !Ref DatadogMonitored, true ]

Resources:
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-${ServiceName}"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: typeId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: typeId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ServiceName}-${Environment}"
      StageName: !Sub "${Environment}"
      Auth:
        DefaultAuthorizer: 'AWS_IAM'
        AddDefaultAuthorizerToCorsPreflight: False
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: '2.0'
        basePath: !Sub '/${Environment}'
        schemes:
          - 'https'
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        paths:
          /resume:
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              tags:
                - CORS
              security:
                - NONE: []
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
            get:
              produces:
                - "application/json"
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                  - lambdaArn: !GetAtt "LambdaFunction.Arn"
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                httpMethod: "POST"
                credentials: !GetAtt "ApiIAMRole.Arn"
                type: "AWS_PROXY"
            post:
              produces:
                - "application/json"
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                  - lambdaArn: !GetAtt "LambdaFunction.Arn"
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                httpMethod: "POST"
                credentials: !GetAtt "ApiIAMRole.Arn"
                type: "AWS_PROXY"
  ApiGatewayInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "LambdaFunction.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [
        "", [
        "arn:aws:execute-api:",
        {"Ref": "AWS::Region"}, ":",
        {"Ref": "AWS::AccountId"}, ":",
        !Ref MyApi, "/*/*/*"
      ]
      ]
  ApiIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-${Environment}"
      Handler: lambda_function.lambda_handler
      Timeout: 60
      CodeUri: .
      Runtime: "python3.8"
      Environment:
        Variables:
          SAMPLE_ENV_VARIABLE_NAME: !Ref SampleEnvVariableName
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Role: !GetAtt "LambdaIAMRole.Arn"
      Tags:
        datadog:
          !If [DatadogMonitored, "monitored", "unmonitored"]

  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: !Ref "ServiceName"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                Resource: "*"
              - Effect: Allow
                Action:
                    - s3:ListBucket
                    - s3:GetObject*
                Resource: "arn:aws:s3:::SomeBucket/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject*
                Resource: "arn:aws:s3:::SomeBucket/*"
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:GetRecords
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DescribeTable
                Resource: !GetAtt DynamoTable.Arn
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:GetQueueUrl"
                  - "sqs:DeleteMessage"
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:GetQueueAttributes"
                Resource: !GetAtt DeadLetterQueue.Arn
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ServiceName}-${Environment}-dead-letter"
      MessageRetentionPeriod: 1209600
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ServiceName}-user-pool-${Environment}"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${ServiceName}-user-pool-client-${Environment}"
      UserPoolId:
        !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: "ENABLED"
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${ServiceName}-identity-pool-${Environment}"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        "authenticated": !GetAtt CognitoIdentityAuthRole.Arn

  CognitoIdentityAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  !Ref CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'execute-api:Invoke'
                Resource: !Join [
                  "", [
                  "arn:aws:execute-api:",
                  {"Ref": "AWS::Region"}, ":",
                  {"Ref": "AWS::AccountId"}, ":",
                  !Ref MyApi, "/*/*/*"
                ]
                ]
              - Effect: 'Allow'
                Action:
                  - 's3:*'
                Resource: !Join [
                  "", [
                  "arn:aws:s3:::SomeBucket:",
                  "/private/",
                  "$",
                  "{cognito-identity.amazonaws.com:sub}/*"
                ]
                ]

Outputs:

  LambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"